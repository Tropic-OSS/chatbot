plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Java-WebSocket (Websocket API)
    // TODO : DEPRICATE
    include( implementation 'org.java-websocket:Java-WebSocket:1.5.2')

    // JDA (Discord API)
    include (implementation("net.dv8tion:JDA:${project.jda_version}"))

    // JDA Utilities
    include("org.slf4j:slf4j-api:2.0.7")
    include("net.sf.trove4j:trove4j:3.0.3")
    include("com.squareup.okio:okio:2.10.0")
    include("com.squareup.okhttp3:okhttp:4.11.0")
    include("org.jetbrains.kotlin:kotlin-stdlib:1.6.20")
    include("org.apache.commons:commons-collections4:4.4")
    include("com.neovisionaries:nv-websocket-client:2.14")

    include( implementation "com.fasterxml.jackson.core:jackson-core:2.14.1")
    include( implementation "com.fasterxml.jackson.core:jackson-databind:2.14.1")
    include( implementation "com.fasterxml.jackson.core:jackson-annotations:2.14.1")

    // Spark (Webserver)
    include( implementation "com.sparkjava:spark-core:${project.jda_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
